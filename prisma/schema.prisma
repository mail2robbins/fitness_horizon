// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  workouts      Workout[]
  meals         Meal[]
  challenges    ChallengeParticipant[]
  posts         Post[]
  comments      Comment[]
  notifications Notification[]
  achievements  Achievement[]
  goals         Goal[]
  likes         Like[]
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User profile
model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  bio             String?
  height          Float?   // in cm
  weight          Float?   // in kg
  dateOfBirth     DateTime?
  gender          String?
  fitnessLevel    String?  // beginner, intermediate, advanced
  preferredUnits  String?  // metric, imperial
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Workout tracking
model Workout {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  date        DateTime
  duration    Int?     // in minutes
  calories    Int?     // calories burned
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises   Exercise[]
}

model Exercise {
  id          String   @id @default(cuid())
  workoutId   String
  name        String
  sets        Int
  reps        Int
  weight      Float?   // in kg
  duration    Int?     // in seconds
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workout     Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
}

// Nutrition tracking
model Meal {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  date        DateTime
  calories    Int
  protein     Float?   // in grams
  carbs       Float?   // in grams
  fat         Float?   // in grams
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  foods       FoodItem[]
}

model FoodItem {
  id          String   @id @default(cuid())
  mealId      String
  name        String
  calories    Int
  protein     Float?   // in grams
  carbs       Float?   // in grams
  fat         Float?   // in grams
  portion     String?  // e.g., "1 cup", "100g"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  meal        Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
}

// Challenges and community
model Challenge {
  id          String   @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  type        String   // e.g., "workout", "nutrition", "weight-loss"
  goal        String   // e.g., "Run 100km in a month"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  participants ChallengeParticipant[]
}

model ChallengeParticipant {
  id          String   @id @default(cuid())
  userId      String
  challengeId String
  progress    Float?   // percentage of goal achieved
  joinedAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
}

// Social features
model Post {
  id          String   @id @default(cuid())
  userId      String
  content     String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id          String   @id @default(cuid())
  userId      String
  postId      String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id          String   @id @default(cuid())
  userId      String
  postId      String
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

// Notifications
model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  message     String
  type        String   // e.g., "achievement", "challenge", "social"
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Achievements and gamification
model Achievement {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  icon        String?
  unlockedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Goals
model Goal {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  type        String   // e.g., "weight", "workout", "nutrition"
  target      Float
  current     Float    @default(0)
  startDate   DateTime
  endDate     DateTime
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
